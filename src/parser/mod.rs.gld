# This file is generated by gilder. Do not edit it manually.
1715462647955314394
"Ok([Function(Function { name: \"add\", args: [\"a\", \"b\"], body: Call { callee: Variable { name: \"add\" }, args: [Element(Variable { name: \"a\" }), Element(Variable { name: \"b\" }), Element(Literal { value: Int(123) })] } })])"
"Ok([Function(Function { name: \"f\", args: [\"a\", \"b\"], body: Block(Block { statements: [Let { name: \"c\", mutable: false, expr: Call { callee: Variable { name: \"add\" }, args: [Element(Variable { name: \"a\" }), Element(Variable { name: \"b\" })] } }, Expression { expr: Return { expr: Some(If { condition: Literal { value: Bool(true) }, then: Literal { value: Int(123) }, else_: None }) } }], expr: None }) })])"
"Ok([Function(Function { name: \"f\", args: [], body: Block(Block { statements: [Expression { expr: Return { expr: Some(Op { name: \"__sub\", args: [Op { name: \"__add\", args: [Literal { value: Int(1) }, Op { name: \"__mul\", args: [Literal { value: Int(2) }, Literal { value: Int(3) }] }] }, Op { name: \"__div\", args: [Literal { value: Int(4) }, Literal { value: Int(5) }] }] }) } }], expr: None }) })])"
"Ok([Variable { name: \"f\", mutable: false, expr: Closure(Function { name: \"\", args: [\"a\"], body: Block(Block { statements: [Expression { expr: Return { expr: Some(Literal { value: Int(123) }) } }], expr: None }) }) }])"
"Ok([Variable { name: \"f\", mutable: false, expr: Closure(Function { name: \"\", args: [\"a\"], body: Block(Block { statements: [Expression { expr: Return { expr: Some(Literal { value: Int(123) }) } }], expr: None }) }) }, Variable { name: \"f\", mutable: false, expr: Closure(Function { name: \"\", args: [], body: Literal { value: Int(123) } }) }])"
"Ok([Function(Function { name: \"main\", args: [], body: Literal { value: Int(1) } })])"
"Ok([Function(Function { name: \"fib\", args: [\"n\"], body: If { condition: Op { name: \"__gt\", args: [Literal { value: Int(2) }, Variable { name: \"n\" }] }, then: Literal { value: Int(1) }, else_: Some(Op { name: \"__add\", args: [Call { callee: Variable { name: \"fib\" }, args: [Element(Op { name: \"__sub\", args: [Variable { name: \"n\" }, Literal { value: Int(1) }] })] }, Call { callee: Variable { name: \"fib\" }, args: [Element(Op { name: \"__sub\", args: [Variable { name: \"n\" }, Literal { value: Int(2) }] })] }] }) } }), Function(Function { name: \"main\", args: [], body: Vec { appends: [Element(Call { callee: Variable { name: \"fib\" }, args: [Element(Literal { value: Int(1) })] }), Element(Call { callee: Variable { name: \"fib\" }, args: [Element(Literal { value: Int(2) })] })] } })])"
"Ok([Function(Function { name: \"f\", args: [], body: Labeled { label: \"\", body: Loop { body: If { condition: Literal { value: Bool(true) }, then: Break { label: \"\", expr: None }, else_: Some(Continue { label: \"\" }) } } } })])"
"Ok([Variable { name: \"a\", mutable: false, expr: If { condition: Variable { name: \"a\" }, then: If { condition: Variable { name: \"b\" }, then: Literal { value: Int(1) }, else_: Some(Literal { value: Int(2) }) }, else_: Some(Literal { value: Int(3) }) } }])"
"Ok([Function(Function { name: \"main\", args: [], body: Call { callee: Literal { value: Int(1) }, args: [] } })])"
"Ok([Function(Function { name: \"main\", args: [], body: Variable { name: \"breaking\" } })])"
